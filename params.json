{"name":"Flux","tagline":"Fluent http/rest-client interface for Java","body":"Efficient lightweight client-library for easy fluent http/rest requests in Java.\r\n\r\n# Features\r\n* HTTP methods GET, PUT, POST, DELETE, HEAD, TRACE and OPTIONS\r\n* Basic-Authentication support\r\n* Proxy support (with authentication)\r\n* Configurable retries\r\n* Configurable default timeouts and headers\r\n\r\n# Integration with Maven\r\nUse the [maven repository and artifact][1] on github.\r\n\r\n# Example usage\r\n## Requests\r\n### Creating Requests\r\nSimplest case\r\n\r\n    Response response = Flux.request(\"http://host/resource\").get();\r\n    System.out.println(response.getStreamAsString()); // Work with response, eg. print body\r\n    response.close();\r\n\r\nUsing AutoCloseable\r\n\r\n    try (Response response = Flux.request(\"http://host/resource\").get()) {\r\n        System.out.println(response.getStreamAsString());\r\n    }\r\n\r\n### Methods\r\nCalling the HTTP methods executes the http requests and returns a `Response`.\r\n\r\n    Flux.request(\"http://host/resource\").get();\r\n\r\nThe following methods are available:\r\n\r\n* `get()`\r\n* `put()`\r\n* `post()`\r\n* `delete()`\r\n* `head()`\r\n* `trace()`\r\n* `options()`\r\n* `method(Method method)`\r\n    \r\n### Query parameters\r\nYou can add parameters by calling the fluent `parameter`methods, adding multiple parameter with the same name is possible.\r\n\r\n    Flux.request(\"http://host/resource\").parameter(\"key\", \"value\").get();\r\n    Flux.request(\"http://host/resource\").parameter(\"q\", \"search\").paramter(\"page\", \"2\").get();\r\n    Flux.request(\"http://host/resource\").parameter(\"cities\", \"hamburg\", \"halle\").get();\r\n\r\nAdditional methods for rarely used arguments are also available:\r\n\r\n* `paramter(Map<String, String>)`\r\n* `parameterList(Map<String, List<String>>)`.\r\n\r\n### Body\r\nYou can pass a body by calling the `body(..)` method.\r\n\r\n    Flux.request(\"http://host/resource\").body(\"Hello World\").get();\r\n    Flux.request(\"http://host/resource\").body(new byte[]{72, 101, 108, ...}).get();\r\n\r\n### HTTP Header\r\nBeside the default header you can set the HTTP header for each request individualy. Methods available in the fluent builder:\r\n\r\n* header(String key, String value)\r\n* headers(Map<String, String> headers)\r\n\r\nFor example:\r\n\r\n    Flux.request(\"http://host/resource\").header(\"X-Myapp\", \"Demo\").header(\"User-Agent\", \"Flux\").get();\r\n    // code above does the same as below\r\n    Map<String, String> header = new HashMap<>();\r\n    header.put(\"X-Myapp\", \"Demo\");\r\n    header.put(\"User-Agent\", \"Flux\");\r\n    Flux.request(\"http://host/resource\").headers(header).get();\r\n\r\n### Proxy\r\nEnable a proxy by passing the proxy to a `proxy(..)` method.\r\n\r\n    Flux.request(\"http://host/resource\").proxy(\"1.2.3.4:8080\").get();\r\n\r\nIf the proxy requires authentication use `proxyAuthentication(String username, String password)`.\r\n\r\n    Flux.request(\"http://host/resource\").proxy(\"1.2.3.4:8080\").proxyAuthentication(\"user\", \"pass\").get();\r\n\r\n### Timeout\r\nSetting the default connection and read timeout at once (can be overriden using the builder)\r\n\r\n    Flux.setDefaultTimeout(2500L); // using 2,5 seconds default\r\n    Flux.setDefaultTimeout(\"2s500ms\"); // using 2,5 seconds default\r\n    Flux.setDefaultTimeout(\"1m 5s\"); // using 1 minutes and 5 seconds default\r\n\r\nSetting the timeout using the builder\r\n\r\n    Flux.request(\"http://host/resource\").timeout(2500L).get(); // using 2,5 seconds\r\n    Flux.request(\"http://host/resource\").timeout(\"2s500ms\").get(); // using 2,5 seconds\r\n    Flux.request(\"http://host/resource\").timeout(\"1m 5s\").get(); // using 1 minutes and 5 seconds\r\n\r\nSetting the connection and read timeout independently\r\n\r\n    Flux.setDefaultTimeoutConnection(\"5s\");\r\n    Flux.setDefaultTimeoutRead(\"1m\");\r\n    Flux.request(\"http://host/resource\").timeoutConnection(\"5s\").get();\r\n    Flux.request(\"http://host/resource\").timeoutRead(\"1m\").get();\r\n\r\n### Retries\r\nFailed requests can be retried automatically, enable by setting the amount of retries and the time between the retries. If the retries also fail, the last failed response will be returned.\r\n\r\n    // repeat 2 times with 10 seconds in between\r\n    Flux.request(\"http://host/resource\").retries(2L, \"10s\").get(); \r\n\r\n### Redirects\r\nYou can follow redirects by calling `followRedirects()`, this is enabled by default. To disable this feature call `unfollowRedirects()`.\r\n\r\n## Response\r\nThe `Response` returned from the HttpClient contains status information as well as an open connection to retrieve the stream (therefor the required `close()`or `AutoClosable` - benefit: you don't have to retrieve the whole content if you do not require it).\r\n\r\nActions that can be performed on the `Response` object:\r\n* `getStream()` - Returns the raw body `InputStream`\r\n* `getStreamAsBytearray()`- Returns the raw body as Byte array (`byte[]`)\r\n* `getStreamAsString()` - Returns the body as String (UTF-8 is assumed)\r\n* `getStreamAsString(String encoding)` - Returns the body as String (`encoding` is used to decode the String)\r\n* `storeStream(File file)` - Stores the raw body in the given file\r\n* `storeStream(File file, boolean gunzip)` - Stores the raw body in the given file with the option to gzip it\r\n* `getContentEncoding()` - Returns the \"Content-Encoding\" header\r\n* `getContentType()` - Returns the \"Content-Type\" header\r\n* `getStatusCode()` - Returns the http status code\r\n* `isFailed()` - Returns true if the status code is not succeded\r\n* `isSucceded()` - Returns true if the status code is between 200 and 299\r\n* `isInformational()` - Returns true if the status code is between 100 and 199\r\n* `isRedirection()` - Returns true if the status code is between 300 and 399\r\n* `isClientError()` - Returns true if the status code is between 400 and 499\r\n* `isServerError()` - Returns true if the status code is between 500 and 599\r\n* `getHeaderField(String name)` - Returns the value for a response header\r\n* `getHeaderFields()` - Returns all response headers as `Map<String, String>`\r\n* `close()` - Closes the response (stream); note that `Response` is `Autoclosable`\r\n\r\n# Notes & Hints\r\n* You don't have to use the static `Flux` factory class, if you want to Inject the builder using a DI framework such as Guice, you can simply bind an instance of `FluentHttpClient`.\r\n* Flux is thread-safe\r\n* For testing it is useful to know that you can utilize the `MockCommonHttpClient`. You can pass the `MockCommonHttpClient` with canned Responses.\r\n\r\n  [1]: https://github.com/d8bitr/maven-repository\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}